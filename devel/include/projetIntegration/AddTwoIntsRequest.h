// Generated by gencpp from file projetIntegration/AddTwoIntsRequest.msg
// DO NOT EDIT!


#ifndef PROJETINTEGRATION_MESSAGE_ADDTWOINTSREQUEST_H
#define PROJETINTEGRATION_MESSAGE_ADDTWOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace projetIntegration
{
template <class ContainerAllocator>
struct AddTwoIntsRequest_
{
  typedef AddTwoIntsRequest_<ContainerAllocator> Type;

  AddTwoIntsRequest_()
    : A()
    , B()
    , C()  {
    }
  AddTwoIntsRequest_(const ContainerAllocator& _alloc)
    : A(_alloc)
    , B(_alloc)
    , C(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _A_type;
  _A_type A;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _B_type;
  _B_type B;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _C_type;
  _C_type C;





  typedef boost::shared_ptr< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddTwoIntsRequest_

typedef ::projetIntegration::AddTwoIntsRequest_<std::allocator<void> > AddTwoIntsRequest;

typedef boost::shared_ptr< ::projetIntegration::AddTwoIntsRequest > AddTwoIntsRequestPtr;
typedef boost::shared_ptr< ::projetIntegration::AddTwoIntsRequest const> AddTwoIntsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator1> & lhs, const ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.A == rhs.A &&
    lhs.B == rhs.B &&
    lhs.C == rhs.C;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator1> & lhs, const ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace projetIntegration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a86b0074913850e005da918913d11e8";
  }

  static const char* value(const ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a86b0074913850eULL;
  static const uint64_t static_value2 = 0x005da918913d11e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "projetIntegration/AddTwoIntsRequest";
  }

  static const char* value(const ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point A\n"
"geometry_msgs/Point B\n"
"geometry_msgs/Point C\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.A);
      stream.next(m.B);
      stream.next(m.C);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddTwoIntsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::projetIntegration::AddTwoIntsRequest_<ContainerAllocator>& v)
  {
    s << indent << "A: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.A);
    s << indent << "B: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.B);
    s << indent << "C: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.C);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJETINTEGRATION_MESSAGE_ADDTWOINTSREQUEST_H
